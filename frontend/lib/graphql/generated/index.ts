// this file is autogenerated by codegen
/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  ProcessId: { input: any; output: any; }
};

export type Mutation = {
  __typename?: 'Mutation';
  createProcess: Scalars['ProcessId']['output'];
};


export type MutationCreateProcessArgs = {
  youtubeUrl: Scalars['String']['input'];
};

export type Process = {
  __typename?: 'Process';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['ProcessId']['output'];
  name: Scalars['String']['output'];
  status: ProcessStatus;
  youtubeUrl: Scalars['String']['output'];
};

export enum ProcessStatus {
  Converted = 'CONVERTED',
  Converting = 'CONVERTING',
  Done = 'DONE',
  Downloaded = 'DOWNLOADED',
  Downloading = 'DOWNLOADING',
  Pending = 'PENDING'
}

export type Query = {
  __typename?: 'Query';
  getProcess: Process;
  getProcesses: Array<Process>;
};


export type QueryGetProcessArgs = {
  id: Scalars['ProcessId']['input'];
};

export type AllProcessesQueryVariables = Exact<{ [key: string]: never; }>;


export type AllProcessesQuery = { __typename?: 'Query', getProcesses: Array<{ __typename?: 'Process', id: any, name: string, status: ProcessStatus }> };

export type CreateProcessMutationVariables = Exact<{
  youtubeUrl: Scalars['String']['input'];
}>;


export type CreateProcessMutation = { __typename?: 'Mutation', createProcess: any };

export type GetProcessQueryVariables = Exact<{
  id: Scalars['ProcessId']['input'];
}>;


export type GetProcessQuery = { __typename?: 'Query', getProcess: { __typename?: 'Process', id: any, name: string, youtubeUrl: string, status: ProcessStatus } };


export const AllProcessesDocument = gql`
    query AllProcesses {
  getProcesses {
    id
    name
    status
  }
}
    `;

/**
 * __useAllProcessesQuery__
 *
 * To run a query within a React component, call `useAllProcessesQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllProcessesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllProcessesQuery({
 *   variables: {
 *   },
 * });
 */
export function useAllProcessesQuery(baseOptions?: Apollo.QueryHookOptions<AllProcessesQuery, AllProcessesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AllProcessesQuery, AllProcessesQueryVariables>(AllProcessesDocument, options);
      }
export function useAllProcessesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllProcessesQuery, AllProcessesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AllProcessesQuery, AllProcessesQueryVariables>(AllProcessesDocument, options);
        }
export function useAllProcessesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<AllProcessesQuery, AllProcessesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<AllProcessesQuery, AllProcessesQueryVariables>(AllProcessesDocument, options);
        }
export type AllProcessesQueryHookResult = ReturnType<typeof useAllProcessesQuery>;
export type AllProcessesLazyQueryHookResult = ReturnType<typeof useAllProcessesLazyQuery>;
export type AllProcessesSuspenseQueryHookResult = ReturnType<typeof useAllProcessesSuspenseQuery>;
export type AllProcessesQueryResult = Apollo.QueryResult<AllProcessesQuery, AllProcessesQueryVariables>;
export const CreateProcessDocument = gql`
    mutation CreateProcess($youtubeUrl: String!) {
  createProcess(youtubeUrl: $youtubeUrl)
}
    `;
export type CreateProcessMutationFn = Apollo.MutationFunction<CreateProcessMutation, CreateProcessMutationVariables>;

/**
 * __useCreateProcessMutation__
 *
 * To run a mutation, you first call `useCreateProcessMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProcessMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProcessMutation, { data, loading, error }] = useCreateProcessMutation({
 *   variables: {
 *      youtubeUrl: // value for 'youtubeUrl'
 *   },
 * });
 */
export function useCreateProcessMutation(baseOptions?: Apollo.MutationHookOptions<CreateProcessMutation, CreateProcessMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateProcessMutation, CreateProcessMutationVariables>(CreateProcessDocument, options);
      }
export type CreateProcessMutationHookResult = ReturnType<typeof useCreateProcessMutation>;
export type CreateProcessMutationResult = Apollo.MutationResult<CreateProcessMutation>;
export type CreateProcessMutationOptions = Apollo.BaseMutationOptions<CreateProcessMutation, CreateProcessMutationVariables>;
export const GetProcessDocument = gql`
    query GetProcess($id: ProcessId!) {
  getProcess(id: $id) {
    id
    name
    youtubeUrl
    status
  }
}
    `;

/**
 * __useGetProcessQuery__
 *
 * To run a query within a React component, call `useGetProcessQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProcessQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProcessQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProcessQuery(baseOptions: Apollo.QueryHookOptions<GetProcessQuery, GetProcessQueryVariables> & ({ variables: GetProcessQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProcessQuery, GetProcessQueryVariables>(GetProcessDocument, options);
      }
export function useGetProcessLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProcessQuery, GetProcessQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProcessQuery, GetProcessQueryVariables>(GetProcessDocument, options);
        }
export function useGetProcessSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetProcessQuery, GetProcessQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetProcessQuery, GetProcessQueryVariables>(GetProcessDocument, options);
        }
export type GetProcessQueryHookResult = ReturnType<typeof useGetProcessQuery>;
export type GetProcessLazyQueryHookResult = ReturnType<typeof useGetProcessLazyQuery>;
export type GetProcessSuspenseQueryHookResult = ReturnType<typeof useGetProcessSuspenseQuery>;
export type GetProcessQueryResult = Apollo.QueryResult<GetProcessQuery, GetProcessQueryVariables>;